#!/bin/bash
#set -e
#set -x

SRC=$(dirname $(readlink -f "$0"))
PATH=$PATH:$SRC/bin
BUILD_ROOT="$SRC/tmp"

if [[ -f $SRC/shflags/shflags ]]; then
  . "shflags/shflags" || die "Couldn't find shflags"
else
  . ./lib/shflags/shflags || die " Couldn't find shflags"
fi

DEFINE_boolean dc $FLAGS_FALSE "disable_console"
DEFINE_boolean cli $FLAGS_FALSE "depthcharge cli mode"
DEFINE_boolean fbranch $FLAGS_FALSE "use firmware branch"
DEFINE_boolean ecupdate $FLAGS_FALSE "enable ec EC_SOFTWARE_SYNC"
DEFINE_boolean fastboot $FLAGS_FALSE "use fastboot"
DEFINE_string board "" "which board firmware you want to build"

# Parse command line.
FLAGS "$@" || exit 1
eval set -- "${FLAGS_ARGV}"

TARGET="${TARGET:=$FLAGS_board}"
CONFIG_ROOT="$SRC/sys-boot"
PORTAGE_FW_ROOT="$SRC/firmware"
ATZ_ROOT="$SRC/../src/third_party/arm-trusted-firmware"
CB_COPY_ROOT="${BUILD_ROOT}/cb-${TARGET}"
CB_BUILD_ROOT="${CB_COPY_ROOT}/build"
CB_BUILD_DIR="${CB_BUILD_ROOT}/coreboot"
CB_CONF_ROOT="${CONFIG_ROOT}/coreboot/files/configs"
CB_ROOT="$SRC/../src/third_party/coreboot"
DP_ROOT="$SRC/../src/platform/depthcharge"
DP_COPY_ROOT="${BUILD_ROOT}/dp-${TARGET}"
DP_BUILD_DIR="${DP_COPY_ROOT}/build"
LP_BUILD_DIR="${CB_BUILD_ROOT}/libpayload"
LP_CONF_ROOT="${CONFIG_ROOT}/libpayload/files/configs"
LP_COPY_ROOT="${CB_COPY_ROOT}/payloads/libpayload"
LP_ROOT="${CB_ROOT}/payloads/libpayload"
VB_ROOT="$SRC/../src/platform/vboot_reference"
RO_CBFS_SRC="${PORTAGE_FW_ROOT}/rocbfs"
RO_CBFS_COPY="${CB_COPY_ROOT}/rocbfs"

concurrencies="$(expr 2 '*' $(cat /proc/cpuinfo  | grep '^processor' | wc -l))"
disable_console=
depthcharge_cli=
firmware_branch=
update_ec=
fastboot_mode=

export PATH=$PATH:~/work/tool/gcc/gcc-linaro-6.3.1-2017.02-x86_64_aarch64-linux-gnu/bin/

# TODO: The below section is platform specific.
export CROSS_COMPILE_i386="i686-pc-linux-gnu-"
	# For coreboot.org upstream architecture naming.
export CROSS_COMPILE_x86="i686-pc-linux-gnu-"
export CROSS_COMPILE_mipsel="mipsel-cros-linux-gnu-"
	# aarch64: used on chromeos-2013.04
#export CROSS_COMPILE_aarch64="aarch64-linux-gnu-"
	# arm64: used on coreboot upstream
#export CROSS_COMPILE_arm64="aarch64-linux-gnu-"
export CROSS_COMPILE_arm="arm-linux-gnueabi-"
export CC=arm-linux-gnueabi-gcc

safe_exec() {
  if ! eval "$*" ; then
    echo "failed executing \"$*\" while in $(pwd)" 1>&2
    exit 1
  fi
}

lp_config() {
  for name in "${LP_CONF_ROOT}/config.${TARGET}" \
    "${LP_CONF_ROOT}/config.${TARGET/_*}"; do
    if [ -f "${name}" ]; then
      echo "${name}"
      return
    fi
  done
  echo "Could not find lp config for ${TARGET}" >&2
  exit 1
}

add_ec() {
	local rom="$1"
	local name="$2"
	local ecroot="$3"

	cbfstool "${rom}" add -r FW_MAIN_A,FW_MAIN_B -t raw -c lzma \
		 -f "${ecroot}/ec.RW.bin" -n "${name}" || exit 1
	cbfstool "${rom}" add -r FW_MAIN_A,FW_MAIN_B -t raw -c none \
		 -f "${ecroot}/ec.RW.hash" -n "${name}.hash" || exit 1
}

sync_cb() {
  local sync_items
  local thirdparty='3rdparty'
  local private_files
  local blobs="${thirdparty}/blobs"

  if [ ! -d "${CB_COPY_ROOT}" ]; then
    safe_exec mkdir -p "${CB_COPY_ROOT}"
  fi


  safe_exec cd "${CB_ROOT}"
  sync_items="$(find . -mindepth 1  -maxdepth 1 | egrep -v '(\.git)')"
  safe_exec rsync -a --delete ${sync_items}  "${CB_COPY_ROOT}"
  safe_exec cd "${CB_COPY_ROOT}"
  if [ ! -d "${thirdparty}/vboot" ]; then
    safe_exec mkdir -p "${thirdparty}/vboot"
  fi
  safe_exec rsync -a --delete "${VB_ROOT}/*" "${thirdparty}/vboot"

  private_files="${PORTAGE_FW_ROOT}/coreboot-private/3rdparty"
  if [ -d "${private_files}" ]; then
    safe_exec rsync -a "${private_files}"/* "${thirdparty}/"
  fi

  # TODO: This is platform dependent.
  safe_exec rsync -a --delete "${ATZ_ROOT}" "${thirdparty}/"

  safe_exec rm -rf ${thirdparty}/*/.git

  # Speculative blob copying
  for b in mrc.bin efi.elf; do
    if [ -f "${PORTAGE_FW_ROOT}/${b}" ]; then
      safe_exec rsync -a "${PORTAGE_FW_ROOT}/${b}" "${blobs}"
    fi
  done

  if [ ! -d "${RO_CBFS_COPY}" ]; then
    if [ ! -d "${RO_CBFS_SRC}" ]; then
      echo "No GBB files available" >&2
    else
      safe_exec cd "${RO_CBFS_SRC}"
      safe_exec mkdir "${RO_CBFS_COPY}"
      safe_exec cp font.bin vbgfx.bin locale_en.bin "${RO_CBFS_COPY}"
      echo 'en' > "${RO_CBFS_COPY}/locales"
    fi
  fi
}

build_cb() {
  local flag
  local mkconf
  local result="${CB_BUILD_DIR}/coreboot.rom"
  local KERNELVERSION

  safe_exec cd "${CB_ROOT}"

  KERNELVERSION="$(git log --oneline -n1 --pretty='format:%h')"
  if [ -n "git status -s" ]; then
    KERNELVERSION+='+'
  fi

  export KERNELVERSION

  safe_exec cd "${CB_COPY_ROOT}"
  mkconf='mkconf'
  safe_exec cp "${CB_CONF_ROOT}/config.${TARGET}" "${mkconf}"
  echo >> "${mkconf}"
  if [ -z "${disable_console}" ]; then
    local fwserial

    fwserial="${CB_CONF_ROOT}/fwserial.${TARGET}"
    if [ ! -f  "${fwserial}" ]; then
      fwserial="${CB_CONF_ROOT}/fwserial.default"
      echo "using default serial config"
    fi
    cat "${fwserial}" >> "${mkconf}"
    echo 'CONFIG_GBB_FLAG_ENABLE_SERIAL=y' >> "${mkconf}"
  fi
    for flag in 'CONFIG_GBB_FLAG_DEV_SCREEN_SHORT_DELAY' \
    'CONFIG_GBB_FLAG_DISABLE_FW_ROLLBACK_CHECK' \
    'CONFIG_GBB_FLAG_FORCE_DEV_BOOT_USB' \
    'CONFIG_GBB_FLAG_FORCE_DEV_SWITCH_ON' ; do

    echo "${flag}=y" >> "${mkconf}"

  done

  if [ -z "${update_ec}" ]; then
      echo "CONFIG_GBB_FLAG_DISABLE_EC_SOFTWARE_SYNC=y" >> "${mkconf}"
  fi

  if [ ! -f .config -o -n "$(diff "${mkconf}" .oldconfig 2>&1)" ]; then
    echo 'Rebuilding coreboot config'
    safe_exec cp "${mkconf}" .oldconfig
    safe_exec mv "${mkconf}" .config
    echo "CONFIG_EC_EXTERNAL_FIRMWARE=y" >> .config
    echo "CONFIG_EC_GOOGLE_CHROMEEC_FIRMWARE_NONE=y" >> .config
    echo "CONFIG_EC_GOOGLE_CHROMEEC_PD_FIRMWARE_NONE=y" >> .config
    yes '' | make oldconfig obj="${CB_BUILD_DIR}"
  else
    safe_exec rm "${mkconf}"
    if [ -f "${result}" ]; then
      if [ -z "$(find . -type f -newer "${result}")" ]; then
        echo "Coreboot is up to date"
        return
      fi
    fi
  fi

  echo 'Rebuilding coreboot'
  safe_exec make -j "${concurrencies}" obj="${CB_BUILD_DIR}"

  safe_exec cbfstool "${CB_BUILD_DIR}/coreboot.rom" expand -r FW_MAIN_A,FW_MAIN_B

  if [ -n "${update_ec}" ]; then
      echo 'Update ec RW image'
      safe_exec add_ec "${result}" "ecrw" "${SRC}"
  fi
}

build_lp() {
  local result="${LP_BUILD_DIR}/install/libpayload/lib/libpayload.a"
  local dstf
  local dstdir
  local conf_file

  if [[ -f "${result}" && -z "$(find ${LP_ROOT} -type f -newer "${result}")" ]]
  then
    echo "Libpayload is up to date"
    return
  fi

  echo "Rebuilding Libpayload"
  safe_exec cd "${LP_COPY_ROOT}"

  conf_file="$(lp_config)"
  if [ ! -f .config -o  \
    -n "$(diff -q .config "${conf_file}" 2>&1)" ] ; then
    safe_exec cp "${conf_file}" .config
    yes '' | make obj="${LP_BUILD_DIR}" oldconfig
    if [ "$?" != "0" ]; then
      echo 'failed to make libpayload config' >&2
      exit 1
    fi
  fi

  safe_exec make -j "${concurrencies}" obj="${LP_BUILD_DIR}"
  safe_exec make -j DESTDIR="${LP_BUILD_DIR}/install" install
}

build_dp() {
  local config_source
  local mkconf
  local oldconfig
  local sync_items
  local vb_copy

  vb_copy="${DP_COPY_ROOT}/vboot_reference"
  if [ ! -d "${DP_COPY_ROOT}/vboot_reference" ]; then
    safe_exec mkdir -p "${vb_copy}"
  fi

  safe_exec cd "${DP_ROOT}"
  sync_items="$(find . -mindepth 1  -maxdepth 1 | egrep -v '\.git')"
  safe_exec rsync -a --delete ${sync_items}  "${DP_COPY_ROOT}"
  safe_exec rsync -a --delete "${VB_ROOT}" "${DP_COPY_ROOT}"

  safe_exec cd "${DP_COPY_ROOT}"

  config_source="board/${TARGET}/defconfig"
  mkconf='mkconf'
  oldconfig='.oldconfig'

  safe_exec cp "${config_source}" "${mkconf}"
  if [ -n "${depthcharge_cli}" ]; then
    cat << EOF >> "${mkconf}"
CONFIG_CLI=y
CONFIG_SYS_PROMPT=\"${board}
EOF
  fi
  if [ ! -f "${oldconfig}" -o -n "$(diff "${mkconf}" "${oldconfig}" 2>&1)" ];
  then
    echo "Will refresh depthcharge"
    safe_exec mv "${config_source}" "${config_source}.bak"
    safe_exec mv "${mkconf}" "${config_source}"
    safe_exec make -j "${concurrencies}" distclean
    safe_exec make -j "${concurrencies}" defconfig BOARD="${TARGET}"
    safe_exec mv "${config_source}" "${oldconfig}"
    safe_exec mv "${config_source}.bak" "${config_source}"
  else
    local result
    safe_exec rm "${mkconf}"

    result="${DP_BUILD_DIR}/depthcharge.elf"
    if [ -f "${result}" -a -z "$(find . -type f -newer ${result})" ]; then
      echo "Depthcharge is up to date"
      return
    fi
  fi

  echo "Rebuilding Depthcharge"
  if [ -n "${firmware_branch}" ]; then
    make -j "${concurrencies}" depthcharge_unified VB_SOURCE="${vb_copy}" \
    PD_SYNC= LIBPAYLOAD_DIR="${LP_BUILD_DIR}/install/libpayload"
  else
    if [ -z "${fastboot_mode}" ]; then
     make -j "${concurrencies}" depthcharge VB_SOURCE="${vb_copy}" \
     PD_SYNC= LIBPAYLOAD_DIR="${LP_BUILD_DIR}/install/libpayload"
    else
     make -j "${concurrencies}" fastboot VB_SOURCE="${vb_copy}" \
     PD_SYNC= LIBPAYLOAD_DIR="${LP_BUILD_DIR}/install/libpayload"
    fi
  fi  
}

sign_region() {
  local cbfs="FW_MAIN_${2}"
  local fw_image="${1}"
  local size
  local tmpfile="$(mktemp bcf.XXXXXX)"
  local vblock="VBLOCK_${2}"
  local keydir="$SRC/vboot/devkeys"

  safe_exec cbfstool "${fw_image}" read -r "${cbfs}" -f "${tmpfile}.2"
  size="$(cbfstool ${fw_image} print -k -r ${cbfs} 2>/dev/null | \
    tail -1 | \
    sed "/(empty).*null/ s,^(empty)[[:space:]]\(0x[0-9a-f]*\)\tnull\t.*$,\1,")"
  size=$(printf "%d" ${size})
  if [ -n "${size}" ] && [ ${size} -gt 0 ]; then
    head -c ${size} "${tmpfile}.2" > "${tmpfile}"
    safe_exec cbfstool "${fw_image}" write --force -u -i 0 \
      -r "${cbfs}" -f "${tmpfile}"
  fi

  safe_exec futility vbutil_firmware \
    --vblock "${tmpfile}.out" \
    --keyblock "${keydir}/firmware.keyblock" \
    --signprivate "${keydir}/firmware_data_key.vbprivk" \
    --version 1 \
    --fv "${tmpfile}" \
    --kernelkey "${keydir}/kernel_subkey.vbpubk" \
    --flags 0

  safe_exec cbfstool "${fw_image}" write -u -i 0 \
    -r "${vblock}" -f "${tmpfile}.out"

  rm -f "${tmpfile}"*
}

make_image() {
  local fbase
  local image_file
  local lzma
  local payload
  local region

  image_file="$SRC/${TARGET}.image.bin"

  safe_exec cp "${CB_BUILD_DIR}/coreboot.rom" "${image_file}"

  # Add minimum localization assets.
  for file in "${RO_CBFS_COPY}"/*; do
    fbase="$(basename $file)"
    if [ "${fbase}" == "locales" ]; then
      lzma=
    else
      lzma='-c lzma'
    fi
    safe_exec cbfstool "${image_file}" add -r COREBOOT\
      -f $file -n "${fbase}" -t raw ${lzma}
  done

  # RO and RW payload, happens to be the same.
  if [ -z "${fastboot_mode}" ]; then
    payload="${DP_BUILD_DIR}/depthcharge.elf"
  else
    payload="${DP_BUILD_DIR}/fastboot.elf"
  fi
  safe_exec cbfstool "${image_file}" add-payload \
    -f "${payload}" -n fallback/payload -c lzma
  safe_exec cbfstool "${image_file}" add-payload \
    -f "${payload}" -n fallback/payload -c lzma -r FW_MAIN_A,FW_MAIN_B

  for region in 'A' 'B'; do
    sign_region "${image_file}" "${region}"
  done
}

#for param in $*; do
#  case "${param}" in
#    (dc)
#      disable_console='yes'
#      ;;
#    (cli)
#      depthcharge_cli='yes'
#      ;;
#    (help)
#      print_help
#      exit 0
#      ;;
#  esac
#done

main() {
  if [ ${FLAGS_dc} -eq ${FLAGS_TRUE} ]; then
    disable_console='yes'
  fi

  if [ ${FLAGS_cli} -eq ${FLAGS_TRUE} ]; then
    depthcharge_cli='yes'
  fi

  if [ ${FLAGS_fbranch} -eq ${FLAGS_TRUE} ]; then
    firmware_branch='yes'
  fi

  if [ ${FLAGS_ecupdate} -eq ${FLAGS_TRUE} ]; then
    update_ec='yes'
  fi

  if [ ${FLAGS_fastboot} -eq ${FLAGS_TRUE} ]; then
    fastboot_mode='yes'
  fi

  if [ -d "tmp/" ]; then
    echo "rm -rf tmp/"
    rm -rf tmp/
  fi

  sync_cb && build_cb && build_lp && build_dp && make_image || exit 1
  echo "***** $(basename $0) SUCCESS ********"
}

main "$@"
